# Summary:
# input_integer_register_0  : seqnr of latest update
# input_integer_register_1  : next command register
# output_integer_register_0 : seqnr of latest update
# output_integer_register_1 : seqnr of latest joint position calculations

# Commands:
# 1: stop robot
# 2: new control input
# 3: do inverse kinematic calculations

# Control input:
# input_double_register_0 : base_rad/s
# input_double_register_1 : shoulder_rad/s
# input_double_register_2 : elbow_rad/s
# input_double_register_3 : wrist1_rad/s
# input_double_register_4 : wrist2_rad/s
# input_double_register_5 : wrist3_rad/s
# input_double_register_6 : speed               (not yet implemented)
# input_double_register_7 : acceleration        (not yet implemented)

# Desired TCP pose:
# input_double_register_8  : TCPx_m
# input_double_register_9  : TCPy_m
# input_double_register_10 : TCPz_m
# input_double_register_11 : TCPrx_rad
# input_double_register_12 : TCPry_rad
# input_double_register_13 : TCPrz_rad

# Corresponding joint positions:
# output_double_register_0 : base_rad
# output_double_register_1 : shoulder_rad
# output_double_register_2 : elbow_rad
# output_double_register_3 : wrist1_rad
# output_double_register_4 : wrist2_rad
# output_double_register_5 : wrist3_rad


def speedj_rtde_prog():
    textmsg("speedj v3")
    global speed_thrd = 0
    global inverse_kin_thrd = 0
    global keep_running = True
#    global acceleration = 0
#    global time = 0
    global updated_tqd = False
    global updated_tTCP_pose = False
    global tqd = [0, 0, 0, 0, 0, 0]
    global tTCP_pose = p[0, 0, 0, 0, 0, 0]
    global tTCP_pose_seqnr = 0
    


    thread speed_thread():
    	qd = [0,0,0,0,0,0]
        while keep_running:
    	    enter_critical
    	    if updated_tqd == True:
    	        qd = tqd
    		    updated_tqd = False
    	    end
    	    exit_critical
            speedj(qd, a=0.75, t=0.05)
    	    sync()
        end
    	stopj(2)
    end

    thread inverse_kinematics_thread():
        q_ref = [0, 0, 0, 0, 0, 0]
        TCP_pose = p[0, 0, 0, 0, 0, 0]
        TCP_pose_seqnr = 0
        do_calculations = False

        while keep_running:
            enter_critical
            if updated_tTCP_pose:
                TCP_pose = tTCP_pose
                TCP_pose_seqnr = tTCP_pose_seqnr
                do_calculations = True
                updated_tTCP_pose = False
            end 
            exit_critical

            if do_calculations:
                q_ref = get_inverse_kin(TCP_pose)

                write_output_float_register(0, q_ref[0])
                write_output_float_register(1, q_ref[1])
                write_output_float_register(2, q_ref[2])
                write_output_float_register(3, q_ref[3])
                write_output_float_register(4, q_ref[4])
                write_output_float_register(5, q_ref[5])

                write_output_integer_register(1, TCP_pose_seqnr)

                #textmsg("Inverse kinematic results written")

                do_calculations = False
            end
            sync()
        end
    end

    textmsg("spawning worker threads")
    speed_thrd = run speed_thread()
    inverse_kin_thrd = run inverse_kinematics_thread()

    cmd=0
    seqnr=0
    old_seqnr=0
    TCP_pose = p[0, 0, 0, 0, 0, 0]
    qd = [0, 0, 0, 0, 0, 0] 

    while keep_running:
        seqnr=read_input_integer_register(0)
        if seqnr == old_seqnr:
            sync()
            continue
        end
        old_seqnr = seqnr
        cmd=read_input_integer_register(1)
    	if cmd==1:
    	    textmsg("Stop-command received")
    	    enter_critical
    	    keep_running=False
    	    tqd = [0, 0, 0, 0, 0, 0]
    	    exit_critical
    	elif cmd==2: 
            textmsg("New control input received")

            # Simply raising a flag and reading the registers in speed_thread could remove the need for tqd and qd
    	    qd[0] = read_input_float_register(0) # base   
            qd[1] = read_input_float_register(1) # shoulder
            qd[2] = read_input_float_register(2) # elbow
            qd[3] = read_input_float_register(3) # w1
            qd[4] = read_input_float_register(4) # w2
            qd[5] = read_input_float_register(5) # w3
 
    	    enter_critical      
            tqd = qd
    	    updated_tqd = True
    	    exit_critical

    	elif cmd==3:                            
            textmsg("New TCP pose reference received")

# Simply raising a flag and reading the registers in inverse_calc_thread could remove the need for tTCP_pose and TCP_pose
            TCP_pose[0] = read_input_float_register(8)
            TCP_pose[1] = read_input_float_register(9) 
            TCP_pose[2] = read_input_float_register(10) 
            TCP_pose[3] = read_input_float_register(11) 
            TCP_pose[4] = read_input_float_register(12) 
            TCP_pose[5] = read_input_float_register(13) 
            
            enter_critical
            tTCP_pose = TCP_pose
            tTCP_pose_seqnr = seqnr
            updated_tTCP_pose = True
            exit_critical
    	end
    	write_output_integer_register(0, seqnr)
    	sync()
    end
    textmsg("Closing down robot")
end
run program
